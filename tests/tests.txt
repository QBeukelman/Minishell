=== ONLY PIPES ===

cat README.md Makefile | wc -w
cat Makefile || wc


=== ONLY REDIRECTS ===
<<EOF<<EOF2<<EOF3 << cat							
cat README.md > grep "a"
cat << EOF > output.txt								
echo mate > hello									
'EOF' / "..."										
grep aa << EOF
echo hello to this >> input.txt 
cat README.md > input.txt
echo hello > input.txt
echo hello > out1 > out2
echo "hello" >input.txt
cat <Makefile


=== ONLY PIPES
cat | cat | cat | ls
c"at" README.md |wc
cat README.md|wc
cat "README.md"|wc


=== PIPES AND REDIRECTS ===
cat Makefile | grep pr | head -n 5 | hello			
cat README.md | wc
cat README.md | wc -w | wc
echo hello world | wc > outfile.txt >> outfile.txt
echo hello | wc > outfile.txt						
grep aa << EOF | wc									
grep aa << EOF < README.md | wc
cat README.md >> output.txt | grep "a"
grep aa << EOF | wc > out							
grep aa << EOF | wc | wc -w >> OUTPUT


=== EXPANDER ===
echo "hello"
cat "README.md" "Makefile" | wc -w
echo $USER$PATH
e'ch'o hello
echo "hello $TERM$NOARG more"						[1] Valgrind LEAK
echo $$$$$???										[3] Valgrind LEAK
echo $?												
echo 123$????										[1] Valgrind LEAK		
echo hello$?										[1] Valgrind LEAK		
echo hel'll"o"'
echo hello"more more"hello
echo "hello $USER$TERM more"
echo "hello $USER more"
echo hello$USER
echo "hello $NOT_A_KEY"								[1] Valgrind LEAK
echo "my name is $USER and I use $TERM"
echo "hello '$USER' more"
echo ''"hello"
echo ''"hello"''"there"
export ch=ch
echo e"$ch"o										
echo "hello $USER"$TERM" more"
echo "hello $USER'$TERM' more"						[1] Valgrind LEAK


=== BUILTINS ===
export A=1 B=2 C=3 D=4 E=5 F=6 G=7 H=8 I=9 J=10		[!] Valgrind (only once when multiple is called. second time is none)
export =
export @
export 1											
echo "hello $A $A"
export A=1 NEW=you B=2
echo "Hello $NEW, copy $A $B"
cd -
cd Deskto (invalid dir)
cd Makefile (a file, no dir)
cd test (dir with no access rights)
unset PWD											
unset HOME PATH SHELL USER PWD TERM ZSH
echo -n -nnn -n -n -n -n hello


=== ERROR MESSAGES ===
<<EOF
echo >
echo <<
echo > |
echo "bip | bip ; coyotte > < "
echo hello > input.txt and then chmod 000
echo this >> input.txt


=== SIGNALS ===
heredoc: ctrl-c gives a newline, not sure why
heredoc: ctrl-\ activates quit whilst there is a SIG_IGN for that?
grep aa <<EOF
when aa is typed and you press ctrl-c -> still prints out aa, bash does not do that


=== EXIT ===
env | export 1
env | exit
exit | wc


